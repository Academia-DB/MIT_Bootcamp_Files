{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _nodeHtmlParser = require(\"node-html-parser\");\n\nvar _constants = require(\"./constants\");\n\nvar MIDDLEWARE_TIME_BUDGET = 10;\nvar MAXIMUM_IMAGE_PRELOADS = 2;\nvar IMAGE_PRELOAD_SIZE_THRESHOLD = 2500;\nvar middlewareRegistry = [];\n\nfunction registerPostProcessor(name, middleware, condition) {\n  middlewareRegistry.push({\n    name: name,\n    middleware: middleware,\n    condition: condition || null\n  });\n}\n\nfunction processHTML(_x, _x2, _x3) {\n  return _processHTML.apply(this, arguments);\n}\n\nfunction _processHTML() {\n  _processHTML = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(html, data, options) {\n    var postProcessData, root, document, callMiddleWare, _callMiddleWare, i, middleware;\n\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _callMiddleWare = function _callMiddleWare3() {\n              _callMiddleWare = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(middleware, name) {\n                var timer, inspectTime;\n                return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        timer = Date.now();\n                        middleware.inspect(root, postProcessData, data);\n                        inspectTime = Date.now() - timer;\n                        _context3.next = 5;\n                        return middleware.mutate(document, postProcessData, data);\n\n                      case 5:\n                        document = _context3.sent;\n                        timer = Date.now() - timer;\n\n                        if (timer > MIDDLEWARE_TIME_BUDGET) {\n                          console.warn(\"The postprocess middleware \\\"\".concat(name, \"\\\" took \").concat(timer, \"ms(\").concat(inspectTime, \", \").concat(timer - inspectTime, \") to complete. This is longer than the \").concat(MIDDLEWARE_TIME_BUDGET, \" limit.\"));\n                        }\n\n                        return _context3.abrupt(\"return\");\n\n                      case 9:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee3);\n              }));\n              return _callMiddleWare.apply(this, arguments);\n            };\n\n            callMiddleWare = function _callMiddleWare2(_x9, _x10) {\n              return _callMiddleWare.apply(this, arguments);\n            };\n\n            if (middlewareRegistry[0]) {\n              _context4.next = 4;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", html);\n\n          case 4:\n            postProcessData = {\n              preloads: {\n                images: []\n              }\n            };\n            root = (0, _nodeHtmlParser.parse)(html);\n            document = html; // Calls the middleware, with some instrumentation and logging\n\n            i = 0;\n\n          case 8:\n            if (!(i < middlewareRegistry.length)) {\n              _context4.next = 16;\n              break;\n            }\n\n            middleware = middlewareRegistry[i];\n\n            if (!(!middleware.condition || middleware.condition(options))) {\n              _context4.next = 13;\n              break;\n            }\n\n            _context4.next = 13;\n            return callMiddleWare(middlewareRegistry[i].middleware, middlewareRegistry[i].name);\n\n          case 13:\n            i++;\n            _context4.next = 8;\n            break;\n\n          case 16:\n            return _context4.abrupt(\"return\", document);\n\n          case 17:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _processHTML.apply(this, arguments);\n}\n\nvar FontOptimizerMiddleware = /*#__PURE__*/function () {\n  function FontOptimizerMiddleware() {\n    var _this = this;\n\n    _classCallCheck(this, FontOptimizerMiddleware);\n\n    this.fontDefinitions = [];\n\n    this.mutate = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(markup, _data, options) {\n        var result, key, url, fontContent;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                result = markup;\n\n                if (options.getFontDefinition) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", markup);\n\n              case 3:\n                _context.t0 = _regeneratorRuntime().keys(_this.fontDefinitions);\n\n              case 4:\n                if ((_context.t1 = _context.t0()).done) {\n                  _context.next = 13;\n                  break;\n                }\n\n                key = _context.t1.value;\n                url = _this.fontDefinitions[key];\n\n                if (!(result.indexOf(\"<style data-href=\\\"\".concat(url, \"\\\">\")) > -1)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                return _context.abrupt(\"continue\", 4);\n\n              case 9:\n                fontContent = options.getFontDefinition(url);\n                result = result.replace('</head>', \"<style data-href=\\\"\".concat(url, \"\\\">\").concat(fontContent, \"</style></head>\"));\n                _context.next = 4;\n                break;\n\n              case 13:\n                return _context.abrupt(\"return\", result);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x4, _x5, _x6) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n\n  _createClass(FontOptimizerMiddleware, [{\n    key: \"inspect\",\n    value: function inspect(originalDom, _data, options) {\n      var _this2 = this;\n\n      if (!options.getFontDefinition) {\n        return;\n      } // collecting all the requested font definitions\n\n\n      originalDom.querySelectorAll('link').filter(function (tag) {\n        return tag.getAttribute('rel') === 'stylesheet' && tag.hasAttribute('data-href') && _constants.OPTIMIZED_FONT_PROVIDERS.some(function (url) {\n          var dataHref = tag.getAttribute('data-href');\n          return dataHref ? dataHref.startsWith(url) : false;\n        });\n      }).forEach(function (element) {\n        var url = element.getAttribute('data-href');\n\n        if (url) {\n          _this2.fontDefinitions.push(url);\n        }\n      });\n    }\n  }]);\n\n  return FontOptimizerMiddleware;\n}();\n\nvar ImageOptimizerMiddleware = /*#__PURE__*/function () {\n  function ImageOptimizerMiddleware() {\n    _classCallCheck(this, ImageOptimizerMiddleware);\n\n    this.mutate = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(markup, _data) {\n        var result, imagePreloadTags;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                result = markup;\n                imagePreloadTags = _data.preloads.images.filter(function (imgHref) {\n                  return !preloadTagAlreadyExists(markup, imgHref);\n                }).reduce(function (acc, imgHref) {\n                  return acc + \"<link rel=\\\"preload\\\" href=\\\"\".concat(imgHref, \"\\\" as=\\\"image\\\"/>\");\n                }, '');\n                return _context2.abrupt(\"return\", result.replace(/<link rel=\"preload\"/, \"\".concat(imagePreloadTags, \"<link rel=\\\"preload\\\"\")));\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x7, _x8) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n  }\n\n  _createClass(ImageOptimizerMiddleware, [{\n    key: \"inspect\",\n    value: function inspect(originalDom, _data) {\n      var imgElements = originalDom.querySelectorAll('img');\n      var eligibleImages = [];\n\n      for (var i = 0; i < imgElements.length; i++) {\n        if (isImgEligible(imgElements[i])) {\n          eligibleImages.push(imgElements[i]);\n        }\n\n        if (eligibleImages.length >= MAXIMUM_IMAGE_PRELOADS) {\n          break;\n        }\n      }\n\n      _data.preloads.images = [];\n\n      for (var _i = 0, _eligibleImages = eligibleImages; _i < _eligibleImages.length; _i++) {\n        var imgEl = _eligibleImages[_i];\n        var src = imgEl.getAttribute('src');\n\n        if (src) {\n          _data.preloads.images.push(src);\n        }\n      }\n    }\n  }]);\n\n  return ImageOptimizerMiddleware;\n}();\n\nfunction isImgEligible(imgElement) {\n  var imgSrc = imgElement.getAttribute('src');\n  return !!imgSrc && sourceIsSupportedType(imgSrc) && imageIsNotTooSmall(imgElement) && imageIsNotHidden(imgElement);\n}\n\nfunction preloadTagAlreadyExists(html, href) {\n  var regex = new RegExp(\"<link[^>]*href[^>]*\".concat(href));\n  return html.match(regex);\n}\n\nfunction imageIsNotTooSmall(imgElement) {\n  // Skip images without both height and width--we don't know enough to say if\n  // they are too small\n  if (!(imgElement.hasAttribute('height') && imgElement.hasAttribute('width'))) {\n    return true;\n  }\n\n  try {\n    var heightAttr = imgElement.getAttribute('height');\n    var widthAttr = imgElement.getAttribute('width');\n\n    if (!heightAttr || !widthAttr) {\n      return true;\n    }\n\n    if (parseInt(heightAttr) * parseInt(widthAttr) <= IMAGE_PRELOAD_SIZE_THRESHOLD) {\n      return false;\n    }\n  } catch (err) {\n    return true;\n  }\n\n  return true;\n} // Traverse up the dom from each image to see if it or any of it's\n// ancestors have the hidden attribute.\n\n\nfunction imageIsNotHidden(imgElement) {\n  var activeElement = imgElement;\n\n  while (activeElement.parentNode) {\n    if (activeElement.hasAttribute('hidden')) {\n      return false;\n    }\n\n    activeElement = activeElement.parentNode;\n  }\n\n  return true;\n} // Currently only filters out svg images--could be made more specific in the future.\n\n\nfunction sourceIsSupportedType(imgSrc) {\n  return !imgSrc.includes('.svg');\n} // Initialization\n\n\nregisterPostProcessor('Inline-Fonts', new FontOptimizerMiddleware(), // Using process.env because passing Experimental flag through loader is not possible.\n// @ts-ignore\nfunction (options) {\n  return options.optimizeFonts || process.env.__NEXT_OPTIMIZE_FONTS;\n});\nregisterPostProcessor('Preload Images', new ImageOptimizerMiddleware(), // @ts-ignore\nfunction (options) {\n  return options.optimizeImages || process.env.__NEXT_OPTIMIZE_IMAGES;\n});\nvar _default = processHTML;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../../../next-server/lib/post-process.ts"],"names":["MIDDLEWARE_TIME_BUDGET","MAXIMUM_IMAGE_PRELOADS","IMAGE_PRELOAD_SIZE_THRESHOLD","middlewareRegistry","name","middleware","condition","postProcessData","preloads","images","root","document","timer","Date","inspectTime","console","i","callMiddleWare","FontOptimizerMiddleware","inspect","options","originalDom","tag","OPTIMIZED_FONT_PROVIDERS","url","dataHref","element","result","fontContent","ImageOptimizerMiddleware","imgElements","eligibleImages","isImgEligible","_data","imgEl","src","imagePreloadTags","imgHref","preloadTagAlreadyExists","acc","imgSrc","imgElement","sourceIsSupportedType","imageIsNotTooSmall","imageIsNotHidden","regex","html","heightAttr","widthAttr","parseInt","activeElement","registerPostProcessor","process","processHTML"],"mappings":"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","sourcesContent":["import { parse, HTMLElement } from 'node-html-parser'\nimport { OPTIMIZED_FONT_PROVIDERS } from './constants'\n\nconst MIDDLEWARE_TIME_BUDGET = 10\nconst MAXIMUM_IMAGE_PRELOADS = 2\nconst IMAGE_PRELOAD_SIZE_THRESHOLD = 2500\n\ntype postProcessOptions = {\n  optimizeFonts: boolean\n  optimizeImages: boolean\n}\n\ntype renderOptions = {\n  getFontDefinition?: (url: string) => string\n}\n\ntype postProcessData = {\n  preloads: {\n    images: Array<string>\n  }\n}\n\ninterface PostProcessMiddleware {\n  inspect: (\n    originalDom: HTMLElement,\n    data: postProcessData,\n    options: renderOptions\n  ) => void\n  mutate: (\n    markup: string,\n    data: postProcessData,\n    options: renderOptions\n  ) => Promise<string>\n}\n\ntype middlewareSignature = {\n  name: string\n  middleware: PostProcessMiddleware\n  condition: ((options: postProcessOptions) => boolean) | null\n}\n\nconst middlewareRegistry: Array<middlewareSignature> = []\n\nfunction registerPostProcessor(\n  name: string,\n  middleware: PostProcessMiddleware,\n  condition?: (options: postProcessOptions) => boolean\n) {\n  middlewareRegistry.push({ name, middleware, condition: condition || null })\n}\n\nasync function processHTML(\n  html: string,\n  data: renderOptions,\n  options: postProcessOptions\n): Promise<string> {\n  // Don't parse unless there's at least one processor middleware\n  if (!middlewareRegistry[0]) {\n    return html\n  }\n  const postProcessData: postProcessData = {\n    preloads: {\n      images: [],\n    },\n  }\n  const root: HTMLElement = parse(html)\n  let document = html\n  // Calls the middleware, with some instrumentation and logging\n  async function callMiddleWare(\n    middleware: PostProcessMiddleware,\n    name: string\n  ) {\n    let timer = Date.now()\n    middleware.inspect(root, postProcessData, data)\n    const inspectTime = Date.now() - timer\n    document = await middleware.mutate(document, postProcessData, data)\n    timer = Date.now() - timer\n    if (timer > MIDDLEWARE_TIME_BUDGET) {\n      console.warn(\n        `The postprocess middleware \"${name}\" took ${timer}ms(${inspectTime}, ${\n          timer - inspectTime\n        }) to complete. This is longer than the ${MIDDLEWARE_TIME_BUDGET} limit.`\n      )\n    }\n    return\n  }\n\n  for (let i = 0; i < middlewareRegistry.length; i++) {\n    let middleware = middlewareRegistry[i]\n    if (!middleware.condition || middleware.condition(options)) {\n      await callMiddleWare(\n        middlewareRegistry[i].middleware,\n        middlewareRegistry[i].name\n      )\n    }\n  }\n\n  return document\n}\n\nclass FontOptimizerMiddleware implements PostProcessMiddleware {\n  fontDefinitions: Array<string> = []\n  inspect(\n    originalDom: HTMLElement,\n    _data: postProcessData,\n    options: renderOptions\n  ) {\n    if (!options.getFontDefinition) {\n      return\n    }\n    // collecting all the requested font definitions\n    originalDom\n      .querySelectorAll('link')\n      .filter(\n        (tag: HTMLElement) =>\n          tag.getAttribute('rel') === 'stylesheet' &&\n          tag.hasAttribute('data-href') &&\n          OPTIMIZED_FONT_PROVIDERS.some((url) => {\n            const dataHref = tag.getAttribute('data-href')\n            return dataHref ? dataHref.startsWith(url) : false\n          })\n      )\n      .forEach((element: HTMLElement) => {\n        const url = element.getAttribute('data-href')\n        if (url) {\n          this.fontDefinitions.push(url)\n        }\n      })\n  }\n  mutate = async (\n    markup: string,\n    _data: postProcessData,\n    options: renderOptions\n  ) => {\n    let result = markup\n    if (!options.getFontDefinition) {\n      return markup\n    }\n    for (const key in this.fontDefinitions) {\n      const url = this.fontDefinitions[key]\n      if (result.indexOf(`<style data-href=\"${url}\">`) > -1) {\n        // The font is already optimized and probably the response is cached\n        continue\n      }\n      const fontContent = options.getFontDefinition(url)\n      result = result.replace(\n        '</head>',\n        `<style data-href=\"${url}\">${fontContent}</style></head>`\n      )\n    }\n    return result\n  }\n}\n\nclass ImageOptimizerMiddleware implements PostProcessMiddleware {\n  inspect(originalDom: HTMLElement, _data: postProcessData) {\n    const imgElements = originalDom.querySelectorAll('img')\n    let eligibleImages: Array<HTMLElement> = []\n    for (let i = 0; i < imgElements.length; i++) {\n      if (isImgEligible(imgElements[i])) {\n        eligibleImages.push(imgElements[i])\n      }\n      if (eligibleImages.length >= MAXIMUM_IMAGE_PRELOADS) {\n        break\n      }\n    }\n\n    _data.preloads.images = []\n\n    for (const imgEl of eligibleImages) {\n      const src = imgEl.getAttribute('src')\n      if (src) {\n        _data.preloads.images.push(src)\n      }\n    }\n  }\n  mutate = async (markup: string, _data: postProcessData) => {\n    let result = markup\n    let imagePreloadTags = _data.preloads.images\n      .filter((imgHref) => !preloadTagAlreadyExists(markup, imgHref))\n      .reduce(\n        (acc, imgHref) =>\n          acc + `<link rel=\"preload\" href=\"${imgHref}\" as=\"image\"/>`,\n        ''\n      )\n    return result.replace(\n      /<link rel=\"preload\"/,\n      `${imagePreloadTags}<link rel=\"preload\"`\n    )\n  }\n}\n\nfunction isImgEligible(imgElement: HTMLElement): boolean {\n  let imgSrc = imgElement.getAttribute('src')\n  return (\n    !!imgSrc &&\n    sourceIsSupportedType(imgSrc) &&\n    imageIsNotTooSmall(imgElement) &&\n    imageIsNotHidden(imgElement)\n  )\n}\n\nfunction preloadTagAlreadyExists(html: string, href: string) {\n  const regex = new RegExp(`<link[^>]*href[^>]*${href}`)\n  return html.match(regex)\n}\n\nfunction imageIsNotTooSmall(imgElement: HTMLElement): boolean {\n  // Skip images without both height and width--we don't know enough to say if\n  // they are too small\n  if (\n    !(imgElement.hasAttribute('height') && imgElement.hasAttribute('width'))\n  ) {\n    return true\n  }\n  try {\n    const heightAttr = imgElement.getAttribute('height')\n    const widthAttr = imgElement.getAttribute('width')\n    if (!heightAttr || !widthAttr) {\n      return true\n    }\n\n    if (\n      parseInt(heightAttr) * parseInt(widthAttr) <=\n      IMAGE_PRELOAD_SIZE_THRESHOLD\n    ) {\n      return false\n    }\n  } catch (err) {\n    return true\n  }\n  return true\n}\n\n// Traverse up the dom from each image to see if it or any of it's\n// ancestors have the hidden attribute.\nfunction imageIsNotHidden(imgElement: HTMLElement): boolean {\n  let activeElement = imgElement\n  while (activeElement.parentNode) {\n    if (activeElement.hasAttribute('hidden')) {\n      return false\n    }\n    activeElement = activeElement.parentNode as HTMLElement\n  }\n  return true\n}\n\n// Currently only filters out svg images--could be made more specific in the future.\nfunction sourceIsSupportedType(imgSrc: string): boolean {\n  return !imgSrc.includes('.svg')\n}\n\n// Initialization\nregisterPostProcessor(\n  'Inline-Fonts',\n  new FontOptimizerMiddleware(),\n  // Using process.env because passing Experimental flag through loader is not possible.\n  // @ts-ignore\n  (options) => options.optimizeFonts || process.env.__NEXT_OPTIMIZE_FONTS\n)\n\nregisterPostProcessor(\n  'Preload Images',\n  new ImageOptimizerMiddleware(),\n  // @ts-ignore\n  (options) => options.optimizeImages || process.env.__NEXT_OPTIMIZE_IMAGES\n)\n\nexport default processHTML\n"]},"metadata":{},"sourceType":"script"}